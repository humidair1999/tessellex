// mixins

// https://github.com/mastastealth/sass-flex-mixin
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

// helper functions

@function calculate-width($col-span, $total-num-cols) {
  @return percentage($col-span / $total-num-cols);
}

@function calculate-width-gutters($col-width, $col-span, $gutter-width) {
  @return (($col-width * $col-span) + ($gutter-width * ($col-span - 1)));
}

// traditional width-based grid generators

@mixin tx-generate-trad-col-classes($num-cols) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols} {
      width: calculate-width($i, $num-cols);
    }
  }
}

@mixin tx-generate-trad-col-classes-gutters($num-cols, $col-width, $gutter-width) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols} {
      width: calculate-width-gutters($col-width, $i, $gutter-width);
    }
  }
}

// flexbox-based grid generators

@mixin tx-generate-flex-col-classes($num-cols) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols} {
      @include flex-basis(calculate-width($i, $num-cols));
    }
  }
}

@mixin tx-generate-flex-col-classes-gutters($num-cols, $col-width, $gutter-width) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols} {
      @include flex-basis(calculate-width-gutters($col-width, $i, $gutter-width));
    }
  }
}

@mixin tx-generate-flex-col-classes-device($num-cols, $device-name) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols}--#{$device-name} {
      @include flex-basis(calculate-width($i, $num-cols));
    }
  }
}

@mixin tx-generate-flex-col-classes-device-gutters($num-cols, $device-name, $col-width, $gutter-width) {
  @for $i from 1 through $num-cols {
    &.tx__col--#{$i}of#{$num-cols}--#{$device-name} {
      @include flex-basis(calculate-width-gutters($col-width, $i, $gutter-width));
    }
  }
}

// variables and config



// utility and placeholder classes

// https://css-tricks.com/snippets/css/clear-fix/
%clearfix:after {
    content: "";
    display: table;
    clear: both;
}

// grid classes

.tx__container {
  max-width: 1440px;
  margin: 0 auto;

  padding: 0 16px;

  // TODO: remove once debugging is complete
  background: #d2f1fc;

  @media (min-width: 600px) {
    padding: 0 32px;
  }
}

.tx__row, .tx__col {
  // TODO: remove once debugging is complete
  border: 1px solid #e3e3e3;
}

.tx__row {
  @extend %clearfix;

  // TODO: remove once debugging is complete
  background: #fffbcb;

  .tx__col {
    display: block;
    float: left;
    // by default, traditional cols will take up 100% width and stack
    //  vertically
    width: 100%;

    // TODO: remove once debugging is complete
    background: #ffc5db;

    /* TRAD */
    @include tx-generate-trad-col-classes(6);
  }

  &.tx__row--reverse .tx__col {
    float: right;
  }

  &.tx__row--gutters .tx__col {
    margin-left: 4.4%;

    &:first-child {
      margin-left: 0 !important;
    }

    /* TRAD W/ GUTTERS */
    @include tx-generate-trad-col-classes-gutters(6, 13%, 4.4%);
  }

  &.tx__row--gutters.tx__row--reverse .tx__col {
    margin-left: 0 !important;
    margin-right: 4.4%;

    &:first-child {
      margin-right: 0 !important;
    }
  }
}

// if modernizr detects the browser has flexbox support, all grid functionality
//  will be overridden with flexbox-based awesomeness
.flexbox {
  .tx__row {
    @include flexbox;

    &.tx__row--reverse {
      @include flex-direction(row-reverse);
    }

    &.tx__row--top {
      @include align-items(flex-start);
    }

    &.tx__row--center {
      @include align-items(center);
    }

    &.tx__row--bottom {
      @include align-items(flex-end);
    }

    .tx__col {
      float: none;
      width: auto !important;

      // by default, flex cols will properly flex to take up available
      //  space
      @include flex(1);

      @include tx-generate-flex-col-classes(6);

      @media (min-width: 600px) {
        @include tx-generate-flex-col-classes-device(12, tablet);
      }

      @media (min-width: 1024px) {
        @include tx-generate-flex-col-classes-device(12, desktop);
      }

      &.tx__col--top {
        @include align-self(flex-start);
      }

      &.tx__col--center {
        @include align-self(center);
      }

      &.tx__col--bottom {
        @include align-self(flex-end);
      }
    }

    &.tx__row--gutters .tx__col {
      @include tx-generate-flex-col-classes-gutters(6, 13%, 4.4%);

      @media (min-width: 600px) {
        &.tx__col[class$="--tablet"], &.tx__col[class$="--desktop"] {
          margin-left: 2.36%;
        }

        @include tx-generate-flex-col-classes-device-gutters(12, tablet, 6.17%, 2.36%);
      }

      @media (min-width: 1024px) {
        @include tx-generate-flex-col-classes-device-gutters(12, desktop, 6.17%, 2.36%);
      }
    }

    &.tx__row--gutters.tx__row--reverse .tx__col {
      @media (min-width: 600px) {
        &.tx__col[class$="--tablet"], &.tx__col[class$="--desktop"] {
          margin-right: 2.36%;
        }
      }
    }
  }
}

// general modifier classes to be used on any grid unit

.tx--content-centered {
  text-align: center;
}