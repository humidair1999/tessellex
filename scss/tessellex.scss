// mixins

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

// grid classes

.tx {
  &-container {
    width: 1024px;
    margin: 0 auto;
  }

  &-row, &-col {
    border: 1px solid #e3e3e3;
  }

  &-row {
    @include flexbox;
  }

  &-col {
    @include flex(1);

    &--1of6 { @include flex-basis(16.667%); }
    &--2of6 { @include flex-basis(33.333%); }
    &--3of6 { @include flex-basis(50%); }
    &--4of6 { @include flex-basis(66.667%); }
    &--5of6 { @include flex-basis(83.333%); }
    &--6of6 { @include flex-basis(100%); }

    @media (min-width: 600px) {
      .small-Grid--full > .Grid-cell {
        flex: 0 0 100%;
      }
      .small-Grid--1of2 > .Grid-cell {
        flex: 0 0 50%
      }
      .small-Grid--1of3 > .Grid-cell {
        flex: 0 0 33.3333%
      }
      .small-Grid--1of4 > .Grid-cell {
        flex: 0 0 25%
      }
    }
  }

  &--content-centered {
    text-align: center;
  }
}