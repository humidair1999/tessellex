// mixins

// https://github.com/mastastealth/sass-flex-mixin
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin tx-generate-traditional-col-classes($col-class, $num-cols) {
  @for $i from 1 through $num-cols {
    &#{$col-class}--#{$i}of#{$num-cols} { width: percentage($i / $num-cols); }
  }
}

@mixin tx-generate-flex-col-classes($col-class, $num-cols, $device-name: null) {
  @for $i from 1 through $num-cols {
    @if $device-name != null {
      &#{$col-class}--#{$i}of#{$num-cols}--#{$device-name} {
        @include flex-basis(percentage($i / $num-cols));
      }
    }
    @else {
      &#{$col-class}--#{$i}of#{$num-cols} {
        @include flex-basis(percentage($i / $num-cols));
      }
    }
  }
}

// variables and config

$modernizr-flexbox-class: '.flexbox';

$tx-row-class: '.tx__row';
$tx-col-class: '.tx__col';

// utility and placeholder classes

// https://css-tricks.com/snippets/css/clear-fix/
%clearfix:after {
    content: "";
    display: table;
    clear: both;
}

// grid classes

.tx {
  &__container {
    max-width: 1024px;
    margin: 0 auto;

    padding: 0 16px;

    // TODO: remove once debugging is complete
    background: #d2f1fc;

    @media (min-width: 600px) {
      padding: 0 32px;
    }
  }

  &__row, &__col {
    border: 1px solid #e3e3e3;
  }

  &__row {
    @extend %clearfix;

    // TODO: remove once debugging is complete
    background: #fffbcb;

    #{$modernizr-flexbox-class} & {
      @include flexbox;

      &#{$tx-row-class}--top {
        @include align-items(flex-start);
      }

      &#{$tx-row-class}--center {
        @include align-items(center);
      }

      &#{$tx-row-class}--bottom {
        @include align-items(flex-end);
      }
    }
  }

  &__col {
    display: block;
    float: left;
    // by default, traditional cols will take up 100% width and stack
    //  vertically
    width: 100%;

    // TODO: remove once debugging is complete
    background: #ffc5db;

    @include tx-generate-traditional-col-classes('.tx__col', 6);

    // if modernizr detects the browser has flexbox support, all grid functionality
    //  will be overridden with flexbox-based awesomeness
    #{$modernizr-flexbox-class} & {
      float: none;
      width: auto;

      // by default, flex cols will properly flex to take up available
      //  space
      @include flex(1);

      @include tx-generate-flex-col-classes($tx-col-class, 6);

      @media (min-width: 600px) {
        @include tx-generate-flex-col-classes($tx-col-class, 12, tablet);
      }

      @media (min-width: 1024px) {
        @include tx-generate-flex-col-classes($tx-col-class, 12, desktop);
      }

      &#{$tx-col-class}--top {
        @include align-self(flex-start);
      }

      &#{$tx-col-class}--center {
        @include align-self(center);
      }

      &#{$tx-col-class}--bottom {
        @include align-self(flex-end);
      }
    }
  }

  &--content-centered {
    text-align: center;
  }
}